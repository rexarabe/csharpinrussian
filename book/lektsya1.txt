Лекция 1. 

Архитектура .NET

Лекция 1. Архитектур .NET 

План 
1. История создания платформы .NET. 
2. Архитектура .NET
3. Библиотека базовых классов.
4. Языки программирования .NET/ 
5. Общеязыковая испольняющая среда. 
6. IDE для .NET. 
7. Литература 

1. История создания платформы .NET 

IDE Borland C++ Builder(язык программирования C++)----------------------------------------------------------|
IDE Borland Delphi(Object Pascal)---------------------------------------------------------------------------|
                                                                                                            |
                                                                                                            V
                                                                                  Библиотека визуальных компонентов VCL 
                                                                                       (Visual Component Library)
                                                                                                            |
                                                                                                            |
                                                                                                            V
                                                                                                Приложение Windows

В середине 90-х годов прошлого века фирма Borland выпустила две интегрированные среды разработки(IDE - Integrated Development Environment) для создания програми на языках программирования C++ и Object Pascal (Delphi).
Они базировались на использовании единой библиотеки графических компонентов VCL, предназначенной для написания различных типов Windows-приложений. 

В 1995 году фирма Sun Microsystems разработала высокоуровненый объектно-ориентированный язык программирования Java. 
Его особенностью является то, что он сначала транслируется в спуциальный байт-код, который затем может быть выполнен виртуальной java-машиной на любой компьютерной архитектуре. 

Такой подход является весьма удачными, так как позволятеся добиться раельной кроссплатформенности. 
Он стал основой для созданной позднее спецификации общеязыковой инфраструктуры  CLI (Common Language Infrastrure).

В 1999 году фирма Microsoft начала разработку своей альтернативы Java  и в 2002 году было объявлено о создании новой платформы программирования, получившей название .NET Framework.
Основой .NET является общеязыковая среда исполнения CLR (Common Language Runtime), в которой могут работать различные языки программирования, такие, например, как C#, F#, J#, Ada< C++ и другий.

С точки зрения программиста платформа .NET представляет собой исполняющую среду и обирную библиотеку базовых классов, реализующих весь необходимый функционал для разработки приложений разных типов в ос wINDOWS.

Общеязыковая исполняющая среда CLR (Common Language Runtime) предназначена для автоматического обнаружения, загрузки и управлния объектами .NET, а также выполнения всех необходимых низкоуровневых операций, таких как управление паятью, размещение приложений, координирование вычислительных потоков, выполнение проверок безопасности и т.п.

Общая система типов CTS (Common Type System) описывает все возможные типы данных и все программные конструкции, поддерживаемые CLR. 
Кроме того, в CTS показано, как эти сущности могут взаимодействовать друг с другом, и указано, как они представлены в формате метаданныз .NET. 

Общеязыковая спецификация CLS (Common Language Specification) описывает подмножество общих типов и программных конструкций, которое должны поддерживать все языки программирования для  .NET.

Дополнением к среде CLR и спецификациям CTS/CLS  платформа .NET предоставляет библиотеку базовых классов, которя доступна всем языкам программирования .NET.
Эта библиотека не только инкапсулирует разнообразные примитиыы, такие, например, как вычислительные потоки, потоки ввода-вывода ( в т.ч. и файловый ввод-вывод ), системы визуализации графики и механизмы взаимодействия с различнымим внешними устройствами, но также обеспечивает поддержку для многочилсенных служб, требуемых большинством реальных приложений. 

Библиотеки базовых классов определяют типы, которые можно использовать для построения программных приложений любого вида. 
Например, ASP.NET можно применять для построения веб-сайтов, WCF - для создания сетевых служб , WPF - для написания настольных приложений с графиеческим пользовательским интерфейсо и т. д 

Кроме того, библиотеки базовых классов предоставляют типы для взаимодействия с XML-документами, локальным каталогом и файловой системой текущего компьютера, для коммуникаций с реляционными базами данных (ADO.NET) и т.п.

  ________________________________________.NET Framework__________________
 |                     Библиотека базовых классов                        |
 |Доступ к БД     Windows UI    Безопасность     API для удаленной работы|
 |Файловый ввод-вывод   Многопоточность   API для веб-приложений     ... |
 |_______________________________________________________________________|
 |          Общеязыковая исполняющая среда(CLR)                          |
 |      _____________________________________________________________    |
 |      |               Общая система типов (CTS)                   |    |
 |      | ___________________________________________________       |    |
 |      | |   Общеязыковая спецификация(CLS)                |       |    |
 |      | |_________________________________________________|       |    |
 |      |___________________________________________________________|    |
 |_______________________________________________________________________|
                 <Общая структура платформы .NET Framework>

3. Библиотека базовых классов 
ADO.NET (ActiveX Data Object  для .NET) - набор классов и библиотек для платформы .NET Framework, позволяющих получить доступ и управлять данными, хранящися в базах данных или других источниках 
(Microsoft SQL Server, Microsoft Access, Microsoft Excel, Microsoft Outlook, Microsoft Exchange, Oracle, OLE DB, ODBC, XML, текстовые файлы)

_________________________________________________________________________________
|                                 .NET  Framework                               |
|  ___________________________________________________________________________  |
|  |          ADO.NET                                                        |  |
|  |    _____________________________________________________________        |  |
|  |    |    Data_source<--->Data_provider->DataSet                 |        |  |
|  |    |___________________________________________________________|        |  |
|  |       |          |          |              |                            |  |
|  |       V          V          V              V                            |  |
|  |   ASP.NET  Windows_Forms  Web_Services    Security, etc.                |  |
|  |                                                                         |  |
|  |_________________________________________________________________________|  |
|_______________________________________________________________________________|


3. Библиотека базовых классов 
ASP.NET (Active Server pages для .NET)- набор классов для разработки веб-приложений для платфомы .NET Framework.

Включает в себя следующие компоненты:
* ASP.NET Web Forms - инфраструктура для конструирования веб-страниц;
* ASP.NET MVC  - фреймворк для создания веб-приложений, реализирующий шаблон Модель-Представление-Контроллер (Model-View-Controller),
* ASP.NET Dynamic Data - платформа создания веб-приложений, управляемых данными; 
ASP.NET Web API - инфраструктура для простого взаимодействия между клиентом и сервером, основанная на ASP.NET MVC и использующая контроллеры и маршрутизацию. 

WCF (Windows Communication Foundation) - это многофункциональная коммуникационная технология. 
С ее помощью можно организовывать взаимодействие как на основе REST, так и на основе SOAP, со всем возможностями, характерными для стандартизированных веб-служб, включая поддержку защиты, транзакций, одно- и двунаправленных коммуникаций, маршутизации, обнаружения и т.п. 

WF (Windows Workflow Foundation) - Инфраструктура, предназначенная для опеределения, выполнения и управления рабочими процессами. 
WF поддерживает три типа процессов: 
1) последовательный процесс; 
2) конечный автомат; 
3) процесс, управляемый правилами. 

WF(Windows Forms) - набор классов, предназначеный для создания графического интерфейса пользователя (GUI - Graphical User Interface) и являющийся частью Microsoft .NET Framework. 
Реализует доступ к стандартным элементам интерфейса MS Windows за счет создания обёртки для существующешл Win32 API в управляемом коде. 
Основан на пиксельной графике. 

WFP( Windows presentation Foundation ) - Новая инфраструктура создания GUI для платформы .NET  Framework, основвнная на векторной графике. 
При построении приложений инфраструктура WPF опирается на использование XAML (eXtensible Application Markup Language) - расширяемом языке разметки приложений. 

Нативным (естественным, природным) для платформы .NET является специально разработанный в 1998-2001 гг фирмой Microsoft объектно-ориентированный язык C# (C sharp)

Программа "Hello World":

using System; 
namespace hello
{
  class Program
  {
    static void Main(string[] args)
    {
      Console.WriteLine("Hello World!");
    }
  }
}

4. Языки программирования .NET 
F# - разработанный в 2005 году мультипарадигменный язык программирования семейства .NET Framework. 
Он поддерживает как функциональное, так и императивное и объектно-ориентированное программирование. 

Программа "Hello World"

// Learn more about F# at http:/fsharp.org

open System

[<EntryPoint>]
let main argv = 
     printfn "Hello World from F#!"
     0 // return an integer exit code 

Программа вычисления факториала 

// Learn more about F# at http://fsharp.org 

open System 

let rec fac n = 
    if n < 2 then 1 
      else n * fac(n-1)

      [<EntryPoint>]
      let main argv = 
        let v = fac 5
        printfn "Значение факториала %d." v
        0 // return an integer exit code 

Visual Basic .NET - разработанный в 2001 году объектно-ориентированный язык программирования семейства, являющийся развитеием языка Visual Basic. 

Консольная программа 
"Hello World"

Module Module1
  Sub Main()
    Console.WriteLine("Hello, World!")
  End Sub
End Module

Программа "Hello World" c GUI 

Private Sub HW()
Dim helloworld As New Label 
     With helloworld
     .Text = "Hello, World"
     .AutoSize = vbYes
     .Font = New Font(.Text, 48)
     .Location = new point(100, 100)
     .Visible = True
     End With 
     Me.Controls.Add(helloworld)
    End Sub

C++/CLI - развитие языка С++ для среды программирования Microsoft .NET 
Является частью обзеязыковой инфраструктуры CLI (Common Language Infrastructure), а также дальнейшим развитием Managed C++. 
РАзработан в 2002 году. 

Программа "Hello World"

#include "pch.h"
#include <iostream>

using namespace System; 

int main(array<System::String^>^args)
{
  std::cound<<"Hello World!" <<std::endl;

  return 0;
}

JavaScript - мультипарадигменный язык программирования, поддерживающий объектно-ориентированную, императивную и функциональную парадигмы стили. 
Он используется как встраиваемый язык для программного доступа к объектм приложений (например, как язык сценариев для придания интерактивности веб-страницам).
Разработан в 1995 году. 

Программа "Hello World"

'use strict';
var debug = require('debug');
var express = require('express');
var path= require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

var routes = require('./route/index');
var users = require('./routes/users');
var app = express();

// view engine setup 
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');
//uncomment after placing your favicon in /public 
//app.use(favicon(__dirname + '/public/favicon.ico'));
app.use(logger('dev'));
// ...

5. Общеязыковая исполняющая среда С№
Программы, написанные на любом языке .NET имеют стандартные для Windows расширеня (*.dll или *.exe), но внутренне они устроены совершенно по-другому. 
В частности, двоичные модули  .NET содержат не специфические, а независимые от платформы инструкции на промехуточном языке IL (Intermediate Language) и метаданные типов. 

Исходный код на  С# ---->Компилятор С#-------|
Исходный код на C++/CLI->Компилятор C++/CLI--|
                                             |----->Инструкции IL и метаданные (*.dll, *.exe)
Исходный код на VB.NET-->Компилятор VB.NET---|
Исходный код на ... ---->Компилятор .....----|

Любой .NET-компилятор генерирует инструкции IL и метаданные 

C#
class Calc
{
  public int Add(int x, int y)
  {
    return x + y;
  }
}

IL 

.method public hidebysig instance int32 Add(int32 x, int32 y) cil managed
{
  // Code size 0 (0x9)
  .maxstack 2
  .locals init (int32 V_0)
  IL_0000: nop 
  IL_0001: ldarg.I
  IL_0002: ldarg.2
  IL_0003: add
  IL_0004: stloc.O
  IL_0005: br.s IL_0007
  IL_0007: ldloc.O
  IL_0008: ret
  
} // end of method Calc::Add


  Общая схема работы CLR 

  Исходный код на языке .NET ---> Компилятор C
                                       |
                                       |
                                       |
                                       V
                              Сборка *.dll или *.exe
                              (инструкции IL и метаданные)
                                       |
                                       |
                                       |
                                       V
                        Исполняющая среда (CLR)               
  Загрузчик классов--->JIT-Компилятор--->Специфические для платформы инструкции--->Выполнение кода
      ^
      |
  Библиотеки
  базовых
  классов

6. IDE для .NET
Microsoft Visual Studio 
JetBrains Projects  Rider 
MonoDevelop

