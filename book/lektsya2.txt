Основы языка  программирования C# 

Лекция 2. Основы языка программирования C#

План 
1. Обзор язык C#.
2. Типы данных. 
3. Консольный ввод-вывод. 
4. Основные операции.
5. Операторы языка C#.

1. Обзор языка C#

C# - современный универсальный высокоуровневый объектно-ориентированный язык программирования, созданный в 1998-2001 гг компанией Microsoft как средство разработки приложений для платформы Microsoft .NET Framework . 

C# относится к семейству языков с C-подобным синтаксисом. 
На его разработчиков значительное влияние оказали языки Java и C++. 
Он поддерживает такие возможности как: 
* инкапсуляцию, 
* наследование,
* полиморфизм, 
* перегрузку операторов, 
* статическую типизаицию;
* итераторы; 
* комментарии в формате XML; 
* и многое другое. 

1. Обзор языка C#
Основные преимущества языка C#: 
* поддержка большинства продуктов Microsoft; 
* фиксированный размер базовых типов данных (int - 32-бита; long - 64), что улучшает возможности портирования (переноса) языка;
* автоматическая "сборка мусора" (освобождение памяти);
* низкий "порог вхождения" (синтаксис C# считается наиболее понятным и подходящим для новичков);
* большое количество вакансий на должность C#- программиста. 

Недостатки C#:
* приоритетная ориентированность на платформу Windows (хотя в настоящее время активно развиваются проекты по портированию .NET Framework на другие платформы);
* использование языка бесплатно только в определенных случаях (для небольших фирм, индивидуальных программистов, стартапов и учащихся).

Простое консольное приложение на C# будет иметь следующий вид: 

using System; 

namespace hello 
{
  //Класс запуска приложения 
  class Program
  {
    //Метод Main является точкой входа в программу 
    static void Main(string[] args)
    {
      //Вывод текстового сообщения на экран
      Console.WriteLine("Hello World!");
    }
  }
}

Примечание: как и C++, язык C# является регистрозависимым.

В C# имеются три типа комментариев:
* однострочный;
* многострочный;
* документирующий XML-комментарий. 

Однострочный комментарий может начинаться в люблй позиции строки программного кода. 
Он начинается с двух символов "//" и длится до конца строки. 
Например: 
// Это комментарий 
Console.WriteLine("Hello World!"); // Это тоже комментарий

Многострочный комментарий может состоять из произвольного количества строк. 
Он начинается с двух символвов "/*" и заканчивается - "*/"
Например: 
/*
Это многострочный 
комментарий. 
Он состоит из пяти строк...
*/
Примечание: Многосточные комментарии не могут быть вложенными

Документирующий XML-комментарий начинается с трех символов <///>. 
Его предназнаечние - автоматическая генерация XML-документации. 
Для этого применяются специальные теги XML-документации, такие, например, как <para> (для структурирования текста), <summary> (описания какого-либо элемент) и др. 

Например: 

using System; 
///<summary>
/// Программа "Hello World!"
///</summary>
namespace hello 
{
  ///<summary>
  ///Класс запуска приложения
  ///</summary>
  class Program
  {
    ///<summary>
    ///Метод Main является точкой входа в программу 
    ///<para>Он имеет аргумент - параметры командной строки </para>
    ///</summary>

    static void Main(string[] args)
    {
      Console.WriteLine("Hello World!");
    }
  }
}


2. Типы данных 

C# является строго типизированынм языком. 
Т.е., компилятор и среда времени выполнения CLR строго следят за соответсвием типов данных в выражениях. 
Каждая переменная перед использованием должна быть объявлена. 
Синтаксис описания переменной имеет следующий формат: 

<тип><имя_переменной> [<инициализация>][,...];

Т.е., сначала указывается тип переменной, затем ее имя. 
При необходимости переменной при ее объявлении может быть присвоено некоторое начальное значение. 

Все типы данных в C# можно условно разделить на: 
* простые;
* структурные;
* ссылочные;
* перечисления. 

К простым типам данных относятся логические и числовые типы. 
Логический (булевый) тип обозначается ключевым словом bool. 
Он может принимать одно из двух возможных значений true или false. 

Например: 
bool isFree = false;

Числовые типы данных в C# делятся на целочисленные типы и типы с плавющей точкой (вещественные).
К целочисленным относятся sbyte, byte, short, ushort, int, uint, long, ulong, и char. 
В табл. 1 приведены их приведены их характеристики. 

Таблица 1 - Характеристики целочисленных типов данных C#

Тип данных      Размер(в разрядах)           Диапазон допустимых значенний
sbyte           8-битное целое со знаком       -128 - +127
byte            8-битное целое без знака         0 - 256
char            16-битный символ Unicode        0000-FFFF
short           16-битное целое со занком      -32768 - +32767
ushort          16-битное целое без знака      0 - 65535
int             32-битное целое со знаком      -2147483648 - +2147483647
uint            32-битное целое без знака       0-4294967295
long            64-битное целое со знаком       -922337203685
ulong           64-битное целое без знака       0 - 1844674444444444444444

Тип данных char предназначен для хранения одного символа в формате Unicode. 
Например: 

char b = 'H';
char c = '\u023C';
char d = '\x000D';

   Таблица 2 - Допустимые управляющие последовательности C#

Управляющая последовательность            Описание
 \'                                       Одинарная кавычка 
 \"                                       Двойная кавычка 
  \\                                      Обратный слэш
   \0                                     Нуль (Null)
   \a                                     Звуковой сигнал
   \b                                     Стирание символа слева (Back Space)
   \f                                     Подача страницы (Form feed)
   \n                                     Перевод каретки или пропуск строки
   \r                                     Возврат каретки
   \t                                     Горизонтальная табуляция 
   \v                                     Вертикальная табцляция

Вещественные типы данных в C# это float, double и decimal.

Тип float может принимать значения в диапазоне от +1.5 x 10^-45 до 3.4x10^38 (точночть типа float составляет до 9 знаков). 
Значение типа float может быть написано как в обычной форме, так в экспоненциальной 
Например: 

float a = 10;
float b = 10.5;
float c = 1.0E-10;

Тип данных double может принимать значения в диапазоне от +5.0 x 10-324 до +1.7E308 (точночть типа double составляет до 17 знаков).
например:

double a = 0.000000000001234567;

Тип данных decimal может принимать значения в диапазоне от 1.0E-28 до (точность типа decimal составляет до 29 знаков)
Например: 

decimal a = 0.00000000123444;

Структурные типы данных в C# предназначены для хранения наборов разнотипных элементов. 
Объявление структуры осуществляется с помощью ключевого слова struct. 

Пример програмы, реализуюзей объявление и работу со структурой данных, описывающей комплексные числа, может иметь такой вид:

using System;

namespace hello
{
  public struct Complex
  {
    public float re, im; 
    public Complex(float r, float i)
    {
      re = r;
      im = i;
    }
  }

  class Program
  {
    static void Main(string[] args)
    {
      Complex i = new Complex(0, 1);

      Console.WriteLine("Complex value({0},{1})", i.re, i.im);
    }
  }
}

Ссылочные типы данных в C# - это библиотечные или пользовательские типы, которые размещаются в памяти "кучи" (heap), т.е ссылочные типы используют дополнительные ресурсы системы. 
Такие типы управляются встроенным в CLR "сброщиком мусора"(garbage collection).

В языке C# имеются четыре ссылочных типа:

*классы - типы данных, созданные программистами; 
*интерфейсы - средства языка, обеспечивающие взаимодействие с открытыми атрибутами и поведением классов; 
*делегаты - позволяют безопасно динамически обращаться к методам классов;
*массивы - предназнаечны для хранения множества однотипных элементов. 

Строковый тип данных в C# представляется в виде последовательностей символов Unicode, заключенных в двойные кавычки. 
Могут включать в себя управляющие последовательности. 
Например:

string a = "Hello \n World!"; // Строковый литерал с управляющей последовательностью 
string b = @"Буквальный
             строковый
             литерал" // Буквальный строковый литерал (упр. посл. не обрабатываются)

Примечание: в отличие от С++ в С# строковый тип является встроенным. 

Перечисления в C# предназначены для задания списков константных значений, которые могут относиться к типам byte, int, long и short. 

Например: 

enum Colors {Reg, Green, Blue}; // Red = 0 ; Green = 1, Blue = 2 
enum Sex: short{Male =1, Female}; // Константы относятся к типу short, значения 
                                  // Начинаются c 1 

На практике часто возникает необходимость в преобразовании одного типа данных в другой. Существуют два вида преобразований типов данных:
* Неявные преобразования - происходят автоматически; 
* явные преобразования - выполняются с помощью операции приведения типа (cast), которая используется в тех случаях, когда может произойти потеря точности или ошибка. 

Например:

float a = 1.5f; 
short b = 1;
int c = b; //неявное преобразование типа
int d = (int)a; // явное преобразование вещественного типа к целому с потерей точности

Массив в C# представляет собой объект для хранения множества однотипных данных со встроенными  фукциями различных операций. 
Все массивы можно разделить н одномерные, многомерные и свободные. 

Одномерные массивы (вектора) объявляются, например, следующим образом:

int[] arr; // Обхявление пустого целочисленного массива без инициализации
float[] arr1 = new float[5] {1,2,4,5.5f}; //Объявление массива с инициализацией 
double[] arr2 = {1.0, 2.0, 3.0}; // Еще один вариант объявления с инициализацией

Многомерные массивы объявляются, например, следующим образом:

int[,,] arr = new int[2,2,3,]; //объявление целочисленного массива 2 x2 x 3 без инициализации

float[,] arr1 = {{1.5f, 2}, {2.3}} // Объявление вещественного массиво 2 2 с инициализацик

Свободные массивы - это многомерные массивы, имеющие неодинаковую длину разных измерений 

int [][]  Arr = new int[][];

Arr[0] = new int[4]{1,2,3,4};
Arr[1] = new int[2] {5.6};

Операции над массивами 

В C# для работы с массивами предусмотрены различные свойства и методы, позволяющие выполнять различные операции над его элементами. 
Рассмотрим некоторые из них. 

Для поиска заданного значения в одномернрм массиве ипользутеся метод BinarySearch().


Например:
int[] intArray ={1, 3, 5, 7, 11, 13, 17, 19, 23, 31};
int target = 17; // Value to search for 
   pos;

if ((pos = Array.BinarySearch(intArray, target))>=0)
   Console.WriteLine("Item{0} found at position{1}.", intArray[pos].ToString(), pos + 1);
else
  Console.WriteLine("Item not found");

Операции над массивами (продолжение)

Для получения количества элементов в массиве в заданном направлении используется метод GetLength()

Например:

int[,] matrix = {{1,3}, {5,7}, {11,13}};

Console.WriteLine("Matrix size: {0}x{1}", matrix.GetLength(0), matrix.GetLength(1));
for(int i =0; i < matrix.GetLength(0); i++)
{
  for (int j = 0; j < matrix.GetLength(1); j++)
    Console.Write("{0}", matrix[i,j]);
    Console.WriteLine();
}

Операции над массивами (прдолжение)

Для сортировки элементов одномерного массива используются методы Sort() и Reverse().

Например:

int[] vector = {1,3,-5, 101, 7,11, -13};

Array.Sort(vector);
for (int i = 0; i < vector.Length; i++)
  Console.Write("{0}", vector[i]);
Console.WriteLine();
Array.Reverse(vector);
for (int i = 0; i <vector.Length; i++)
  Console.Write("{0}", vector[i]; 
Console.WriteLine();

3. Консольный ввод-вывод

Для консольного ввода-вывода в C# чаще всего используются методы Read(), ReadLine(), Write() и WriteLine().

Считывание очередного символа из входного потока осуществояется с помощью функции Read(), возврашающей целочисленное значени (int) - код символа. 

Например: 

int ch;

ch = Console.Read();
Console.WriteLine("Code - {0}, char - {1}", ch, (char)ch);

Метод ReadLine() осуществляет считывание очередной строки символов из входного потока. Он возвращает тип string. 
Например: 

double a,b,c;
a = Convert.ToDouble(Console.ReadLine());
b = Convert.ToDouble(Console.ReadLine());
c = Convert.ToDouble(Console.ReadLine());
Console.WriteLine("a - {0}, b - {1}, c - {2}", a, b, c);

Метод Write() и WriteLine() реализуют запись данных в поток. 
Вызов первого метода не приводит к переводу каретки на новую строку. 

Методы Write() и WriteLine() имеют много перегрузок для вывода целых и вещественных чисел, строк и т.п.

Например:

Console.Write('H');
Console.Write('e');
Console.Write('l');
Console.Write('l');
Console.Write('o');
Console.WriteLine(', World!');
Console.WriteLine(10E+20);  
Console.WriteLine(3.1459);

