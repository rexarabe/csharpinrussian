Chapter 01

Hello, C#! Welcome, .NET!

In this first chapter, the goals are setting up your development environment, understanding the similarities and differences betweent .NET Core, .NET Framework, and .NET Standard ,and then creating the simplest application possible with C# and .NET Core using Microsoft's Visual Studio Code. 

After this first chapter, this book can be divided into three parts: 
first, the grammar and vocabulary of the C# language; second, the types available in .NET Core for building app features; and third, examples, of common corss-platfom apps you can build using C# and .NET. 
The Last two chapters are about two types of application that can be built with C# but the first is not cross platfom and the second does not use .NET core yet so they should be considred bonus chapters. 

Most people learn complex topics best by imitation and repetition rather than rading a detailed explanation of the theory ; therefore I will not overload you with detiled explanations of every step thoughout this book. 
The idea is to get you to write some code, build an application from that code, and then for you to see it run. 

You don't need to know all the nitty-gritty details immediately. 
That will be something that comes with times as you build your own apps and go beyond what any book can teach you. 

In the words of Samuel Johnson, author of the English dictionary in 1755, I have commited "a few wild blunders, and risible absurdities, from which no work of such multiplicity is free."
I take sole responsibility for these and hope you appreaciate the challenge of my attempt to lash the wind by writing this book about rapidly evolgin techonolies like C# and .NET Core, and the apps that you can build with them. 

This first chapter covers the following topics: 
*Setting up your development environment 
*Understanding .NET
*Building console apps using Visual Studio Code 
*Downloading solution code from GitHub repository 
*Looking for help


Setting up your development environment 
Before you start programming, you'll need a code editor for C#. Microsoft has a family of code editors and Integrated Development Environments (IDEs), which include: 

*Visual Studio Code
*Visual Studio 2019 
*Visual Studio 2019 for Mac

Using visual Studio Code for cross-platform development 
The most modern and lightweight code editor to choose, and the only one from Microsoft that is corss-platform, is Microsoft Visual Studio Code. 
It is able to run on all common operating systems, including Windows, macOS, and many varieties of Linux, including Red Hat Enterprise Linux(RHEL) and Ubuntu.

Visual Studio Code is a good choice for modern cross-platform development because it has an extensive and growing set of extensions to support many languages beyond C#, and being corss-platform and lightweight it can be installed on all platforms that your apps will be deployed to for quick bug fixes and so on. 

Using Visual Studio Code means a developer can use a cross platform code editor to developer cross platform apps. 
Therefore, I have chosent to use Visual Studio Code for all but the last two chapters for this book, because they need special features not available in Visual Studio Code for building Windows and mobile apps. 

More Information: You can read about Microsoft's plans for Visual Studio Code at the following link: 
https://github.com/Microsoft/vscode/wiki/Roadmap.

If you prefer to use Visual Studio 2019 or Visual Studio for Mac instead of Visual Studio Code, then of course you can, but I will assume that you are already familiar with how to use them and so I will not give steps by step instructions for using them in this book.

More Information: You can read a comparision of Visual Studio Code and Visual Studio 2019 at the following 
https://www.itworld.com/article/3403683/visual-studio-code-stepping-on-visual-studios-toes.html.


Using Visual Studio 2019 for Windows ap developmen 
Microsoft Visual Studio 2019 only runs on Windows, version 7 SP1 oor later.
You must run it on Windows 10 to create Universal Windows Platform (UWP) apps.
It is the only Microsft developer tool that can create Windows apps, so we will use it in Chapter 20, Building Windwos Desktop Apps. 

Using Visual Studio for Mac for mobile develpment 
To create apps for the Apple operating systems like iOS to run on devices like iPhone and iPad, you must have Xcode, but that tool only runs on macOS> 
Although you can use Visual Studio 2019 on Windows with it Xamarin extensions to write cross platform mobile app, you still need macOS and Xcode to compile it. 

So, we will use Visual Studio 2019 for Mac on macOS in Chapter 21, Building Cross Platform Mobile Apps Using Xamarin. Forms.

Recommended tools for chapters 
To help you to set up the best environment to use in this book, the following table summarizes which tools and operating systems I recommended be used for each of the chapters in this book:

_________________________________________________________________________________
| Chapter                | Tool                         | Operating Systems     |
|________________________|______________________________|_______________________|
|Chapter 1 to 19         | Visual Studio Code           | Windows, MacOS, Linux |
|________________________|______________________________|_______________________|
|Chapter 20              | Visual Studio 2019           | Windows 10            |
|________________________|______________________________|_______________________|
|Chapter 21              | Visual Studio 2019 for MAC   | macOS                 |
|________________________|______________________________|_______________________|

To write this book, I used my MacBook Pro and the following listed software:
* Visual Studio Code on mac macOS as my primary code editor. 
* Visual Studio Code on Windows 10 in a virtual machine to test OS-specific  behavior like working with the filesystem.
* Visual Studio 2019 on Windows 10 in a virtual machine to build Windows apps. 
* Visual Studio 2019 for Mac on macOS to build mobile apps. 

Understading Microsoft Visual Studio Code versions
Microsoft releases a new feature version of Visual Studio Code (almost) every month and bug fix versions more frequently. 
For example: 
*Version 1.38, August 2019 feature release. 
*Version 1.38.1, August 2019 bug fix release. 

The version used in this book is 1.38.1 released on 11 September 2019, but the version of Microsoft Visual Studio Code is less importnat than the version of C# for Visual Studio Code extension that you will install later. 

While the C# extension is not required, it povides intelliSense as you type, code navigation, and debugging features, so it's something that's very handy to install. 
To support C# 8.0, you should install C# extension version 1.21.3 or later. 

Understanding .NET
.NET Framework, .NET Core, Xamarin, and .NET Standard are related and overlapping platforms for developers used to build applications and services. 
In this section, we're going to introduce you to each of these .NET concepts. 

Understanding the .NET Framework
.NET Framework is a development platform that includes a Common Language Runtime (CLR), which manages the execution of code, and a Base Class Library(BCL), which provides a rich library of classes to build applicatoins from. 
Microsoft originally designed the .NET Framework to have the possibility of being cross-platform, but Microsoft put their implementation effort into making it work best with Windows. 

Since .NET Framework 4.5.2 it has been an official component of the windows operating system.
.NET Framework is installed on over one billion computers so it must change as little as possible. 
Even bug fixes can cause problems, so it is updated infrenquently.

All of the apps on a computer written for the .NET Framework share the same version of the CLR and libraries stored in the Global Assembly Cache (GAC), which can lead to issues if some of them need a specific versoin for compatibility. 

Good practice: Practically speaking, .NET Framework is Windows-only amd a legacy platform.
Do not create new apps using it. 

Understanding the Mono and Xamarin projects Third parties developed a .NET Framework implementation named the Mono project. 
Mono is cross-platform, but it fell well behind the official implementation of .NET Framework.

Mono has found a niche as the foundation of the Xamarin mobile platform as well sa cross-platform game development platforms like Unity. 

Microsoft Purchased Xamarin in 2016 and now gives away what use to be an expensive Xamarin extension for free with Visual Studio 2019. 
Microsoft renamed the Xamarin Studio development tool, which could only create mobile apps, to Visual Studio fro Mac and gave it the ability to create other types of apps. 
With visual studio 2019 for Mac, Microsoft has replaced parts of the Xamarin Studio editor with parts from Visual Studio for Windows to provide closer parity of experience and performance. 

Understanding .NET Core
we live in a truly cross-platform world where modern mobile and cloud developemetn have made Windows as an operating system, much less important. 
Because of that, Microsoft has been working on an effort to decouple .NET from its close ties with Windows. 
While rewriting .NET Framework to be truly cross-platform, they've taken the opportinity to refactor and remove major parts that are no longer considered core. 
This new product was branded .NET Core and includes a cross-platform implementation of the CLR known as CoreCLR and a streamlined library of classes known as CoreFX.

Scoot Hunter, Microsoft Partner Director Program Manager for .NET, has said that "Forty percent of our .NET Core custormers are brand-new developers to the platform, which is what we want with .NET Core. We want to bring new people in."

.NET Core is fast moving and because it can be deployed side by side with an app, it can change frequently knowing those changes will not affect other .NET Core apps on the same machine. 
Improvements that Microsoft can make to .NET Core cannot be added to .NET Framework. 

Understanding Future versions of .NET
At the Microsoft Build developer conference in May 2019, the .NET team announced that after .NET Core 3.0 is released in September 2019, .NET Core will be renamed .NET and the major versoin number will skip the number four to avoid confusion with .NET Framework 4.x.
So, the next version of .NET Core will be .NET 5.0 and it is scheduled for release in November 2020. 
After that, Microsoft plans on annula major version releases every November, rathear like Apple does major version number releases of iOS every second week in September.

The following tbale shows when the key versions of .NET Core were released, when futuree releases are planned, and which version is used by the various editions of this book:

_________________________________________________________________________________
|Version                  |   Released               |   Edition   |  Published |
|_________________________|__________________________|_____________|____________|
| .NET Core RC1           |November 2015             | First       | March 2016 |
|_________________________|__________________________|_____________|____________|
| .NET Core 1.0           |June 2016                 |             |            |
|_________________________|__________________________|_____________|____________|
| .NET core 1.04          | March 2017               | Second      | March 2017 |
|and .NET Core 1.1.1      |                          |             |            |
|_________________________|__________________________|_____________|____________|
| .NET Core 2.0           | August 2017              |             |            |
|_________________________|__________________________|_____________|____________|
| .NET Core for UWP in    | October 2017             | Third       | November   |
| Windows 10 Fall Creators|                          |             | 2017       |
| Update                  |                          |             |            |
|_________________________|__________________________|_____________|____________|
| .NET Core 2.1           | May 2018                 |             |            |
|_________________________|__________________________|_____________|____________|
| .NET Core 2.2           | December 2018            |             |            |
|_________________________|__________________________|_____________|____________|
| .NET Core 3.0 (Current) | September 2019           | Fourth      |October 2019|
|_________________________|__________________________|_____________|____________|
| .NET Core 3.1(LTS)      | November 2019            |             |            |
|_________________________|__________________________|_____________|____________|
| .NET 5.0                | November 2020            |             |            |
|_________________________|__________________________|_____________|____________|
| .NET 6.0                | November 2021            |             |            |
|_________________________|__________________________|_____________|____________|

I cannot promise 5th and 6th editions of this book to match future rekeases of .NET, but that would be a safe bet. 

Understanding .NET Core support 
.NET Core versions are either Long-term Suport (LTS) or Current, as described in the following list: 
 * LTS releases are stable and require fewer updates over their lifetime. 
 These are a good choice for applications that you do not intend to update frequently. 
 LTS releases will be supported for 3 years after general availability. 
 .NET Core 3.1 will be an LTS release. 

.NET Core 1.0 and 1.1 reached end of life and went out of support on 27 June 2019, 3 years after the initial .NET Core 1.0 release.
   *Current releases include features that may change based on feedback. The se are a good choice for applications that you are actively developing because they provide access to the lastest improvemnets. 
   After a 3-month maintenance period, the previous minor version will no longer be supported. 
   For example, after 1.2 releases systems running version 1.1 will have 3 months to update to 1.2 to remain eligible for support. 
   .NET Core 3.0 is a Current release so if .NET Core 3.1 release so if .NET Core 3.1 releases in November 2019 as planned, then you will need to upgrade to it by February 2020.

   Both receive critical fixes thoughout their lifetime for security and reliability. 
   you must stay up to date with the latest patches to get support. 
   For example, if a system is running 1.0 and 1.0.1 has been released, 1.0.1 will need to be installed. 


   What is different about .NET Core? 
   .NET Core is smaller than the current version of .NET Framework due to the fact that legacy techonoloies have been removed. 
   For example, Windows FOrms and Windows presentatoin Foundation (WPF) can be used to bnuild graphical user interface (GUI) applications, but they are tightly bount to the Windows ecosystem, so they have been removed from .NET Core on macOS and Linux. 

 One of the new features of .NET Cor e3.0 is support for running old Windows Forms and WPF applications using the Windows Desktop Pack that is included with the WIndows version of .NET Core 3.0 which is why it is bigger than the SDKs for macOS and Linux. 
 you can make some small changes to your legacy WIndows app if necessary, and then rebuild it for .NET Core to take advantage of new features and performance improvements. 
 You'll learn about support for building these types of Windows apps in Chapter 20, Building Windows Desktop Apps. 

 The latest techonology used to build WIndows apps is the Universal Windows Platform (UWP), which is built on a custom version of .NET Core. 
 UWP is not part of .NET Core because it is not cross-platform. 

 ASP.NET Qwb Forms and Windows Communication Foundatoin (WCF) are old web application and service techonologies that fewer dvelopers are choosing to use for new development projects today, so they have also been removed from .NET Core. 
 Instead, developers prefer to use ASP.NET MVC and ASP.NET Web API. 
 These two techonologies have been refactored and combined into a new product that runs on .NET Core, named ASP.NET Core. 
 You'll learn about the technolgoeis in Chapter 15, Building Websites Using ASP.NET Core Razor Pages, Chapter 16, Building Websites Using the Model-View-Controller Pattern, and Chapgter 18, Building and Cosuming Web services. 

 Entity Framework (EF) 6 is an object-relational mapping techonolgy that is designed to work with data that is stored in relational databases such as Oracle and Microsoft SQL Server. 
 It has gained baggage over the years, so the cross-platform API has been slimmed down, will be given support for non-relational databases like Microsoft Azure Cosmos DB, and named Entity Framework Core. 
 You will learn about it in Chapter 11, Working with Databses Using entity Framework Core. 

 If you have existing apps that use the old EF then version 6.3 is supported on .NET Core 3.0. 
 In addition to removing large pieces from .NET Framework in order to make .NET Core, Microsoft has componentized the .NET Core into NuGet packages, those being small chunks of functoinality that cna be deployed independently. 

 Microsoft's primary goal is not to make .NET Core smaller than .NET Framework. 
 The goal is to componentize .NET Core to support modern technologies and to have fewer dependencies, so that deployment requires only those packages that your application needs. 

 Understanding .NET Standard 
 The situation with .NET in 2019 is that there are three forked .NET platforms controlled by Microsoft, as shown in the following list:
        * .NET Core: for cross-platfom and new apps. 
        * .NET Framework: for legacy apps. 
        * Xamarin: for mobile apps. 
  Each has strengths and weaknesses because they are all designed for different scenarios. 
  This has led to the problem that a developer must learn three platforms, each with annoying quirks and limitations. 
  Becasue of that, Microsoft defined .NET standard: a specification for a set of APIs that ll .NET platforms can implement to indicate what level of compatibility they have 
  For example, basic support is indicated byu a platform being compliant with .NET Standard 1.4 .

  With .NET Standard 2.0 and later, Microsoft made all three platforms converge on a modern minimum standard, which makes it much easier for developers to share code between any flavor of .NET. 

  For .NET Core 2.0 and lter, this added a number of the missing APIs that developers need to por olf code written for .NET Framework to the cross-platform .NET Core. 
  However, some APIs are implemented, but throw an exception to indicate to a developer that they should not actually be used! 
  This is usually due to differences in the operating system on which you run .NET Core. 
  YOu'll learn how to handle these exceptions in Chapter 2, Speaking C#. 
  It is important to understand that .NET Standard is just a standard. 
  you are not able to install .NET Standard in the same way that you cannot install HTML5. 
  To USe HTML5, you must install a web browser that implemnts the HTML5 standard. 
  To use the .NET Standard, you must install a .NET Platform that implements the .NET Standard specification .NET Standard 2.0 is implemnetd by the latest version of .NET Framework, .NET COre, and Xamarin. 

  THe lastest .NET Standard, 2.1 is only implementd by .NET Core 3.0, Mono, and Xamarin. 
  Some features of C# 8.0 require .NET Standard 2.1 .NET Standard 2.1 is not implemented by .NET Framework .48 so we should treat .NET Framework as legacy. 
