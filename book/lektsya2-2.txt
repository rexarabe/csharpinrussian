Основы языка программирования C#

План

1. Обзор язык C#.
2. Типы данных
3. Консольный ввод-вывод.
4. Основные операции.
5. Операторы языка C#.

1. Обзор языка C#

C# - современный универсальный высокоуровненвый объектно-ориентированный язык программирования, созданный в 1998-2001 гг компанией Microsoft как средство разработки приложений для платформы Microsoft .NET Framework.

C# относится к семейству языков с С-подобным синтаксисмо.
На его разработчиков значительное влияние оказали языки Java и C++.
Он поодерживает такие возможности как:
* Инкапсуляцию,
* Наследование,
* Полиморфизм,
* перегрузку операторов,
* статическую типизацию;
* итераторы;
* комсентарии в формате XML;
* и многое другое.

Осноные преимущества языка C#:
* Поддержка большинства продуктов Microsoft;
* Фиксированный размер базовых типов данных (int - 32-бита; long - 64), что улучшает возможности протирования (переноса) языка;
* автоматическая "сборка мусора" (освобождение памяти);
* низкий "порог вхождения" (синтаксис C# считается наиболее понятным и подходящим для новичков);
* большое количество вакансий на должность C# программиста.

Недостатки C#:
* приритетная ориентированность на платформу Windows (хотя в настоящее время активно развиваются проекти по портированию .NET Framework на другие платформы);
* использование языка бесплатно только в определенных случаях (для небольших фирм, индивидуальных программистов, стартапов и учащихся).

Просто консольное приложение на C# будет иметь слежующий вид:

using System;
namespace Hello
{
    class Program
    {
        static void Main(string[] args)
            [
            Console.WriteLine("Hello World!");
            ]
    }
}

Примечание: как и C++, язык C# является регистрозависимым.

В C# имеются три три типа комментариев:
* однострочный;
* многострочный;
* документирущий XML-Комментарий.

Однострочный комментарий может начинаться в любой позиции строки программного кода.
Он начинается с двух символов "//" и длится до конца строки.
Например:

//это комментарий
Console.WriteLine("Hello World!"); // Это тоже комментарий

Многострочный комментарий может состоять из произвольного количества строк.
Он начинается с двух символов "/*" И заканчивается "*/".

Например:

/*
Это многострочный
комментарий.
*/


Документирующий XML-комментаирий начинается с трех симвлв "///".
Его предназначение - автоматическая генерация XML документации.
Для этого применяются специальные теги XML- документации, такие, например, как <para> ( для структурирования текста ), <summary>
(Описания какого-либо элемента) и др.

Например:

using System;
/// <summary>
/// Программа "Hello World!"
/// </summary>
namespace hello
{
    ///<summary>
    /// Класс запуска приложения
    /// </summary>
    class Programm
    {
        ///<summary>
        ///Метод Main является точкой входа в программу
        /// <para> Он имеет аргумент - параметры командной строки </para>
        /// </summary>

        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}


C# является строго типизированным языком. Т.е., компилятор и среда времени выполнения CLR строго следят за соответсвием типов данных в выражениях.
Каждая переменная перед использованием должна быть объявлена.
Синтаксис описания переменной имеет следующий формат:

<тип> <имя_переменной> [<инициализация>][, ...];

Т.е., сначала указывается тип переменной, затем ее имя.
При необходимости переменной при ее объявлении может быть присвоено некоторое начальное значение.

Все типы данных в C# можно условано разделить на:
* простые;
* структурные;
* ссылочные;
* перечисления.

К простым типам данных относятся логические и числовые типы.
Логический (булевый) тип обозначается ключевым словом bool.
Он может принимать одно из двух возможных значений true или false.

Например:

bool isFree = false;

Числовые типы данных в C# делятся на целочисленные типы и типы с плавающей точкой (вещественные).
К целочисленным относятся sbyte, byte, short, ushort, int, uint, long, ulong и char.

Тип данных char предназначен для хранения одного символа в формате Unicode.
Например:
\'
\''
\\
\0
\a
\b
\f
\n
\r
\t
\v

Вещественные типы данных в C# это float, double и decimal.


float a  = 10;
float b = 10.5;
float c = 1.0E-10;

Тип данных double может принимать значения в диапазоне
(точность типа double составляет до 17 знаков).


Структурные типы данных в C# предназначены для хранения наборов ращнотипных элементов.
Объявление структуры осуществлятеся с помиошью ключевого слова struct/

Пример программиы, реализующей объявление и работу со структурой данных, описывающей комплексные числа, может иметь такой вид:

using System;

namespace hello
{
    public struct Complex
    {
        public float re, im;
        public Complex(float r, float i)
        {
            re = r;
            im = i;
        }
    }

    class Program
    {
        static void Main(string[] arg)
        {
            Complex i = new Complex(0,1);

            Cosole.WriteLine("Complex Value ({0}, {1})", i.re, i.im);
        }
    }
}


Сылочные типы данных в C# - это библиотечные или пользовательские типы, которые размещаются в памяти "кучи" (heap), т.е. ссылочные типы используют дополнительные русурсы системы.
Такие типы управляются встроенным в CLR "сборщиком мусора"(garbage collection)

В языке C# имеются четыре ссылочных типа:
* Классы - типы данных, созданные программистами;
* интерфейсы - средства языка, обеспечивающие взаимодействие с открытыми атрибутами и поведением классов;
* делегаты - позволяют безопасно динамически обращаться к методам классов;
* массивы - предназначены для хранения множества однотипных элементов.

Строковый тип данных в C# прелсиавояеися в виде последовательностей символов Unicode, заключенных в двойные кавычки.
Могут включать в себя управляющие последовательности.

Например:

string a = "Hello \n World!"; // Строковый литерал с управляющей последовательностью
string b = @"Буквальный
             строковый
             литерал" //

Перечисления в C# предназначены для задания списков константных значений, которые могут относиться к типам byte, int, long и short.

например:

enum Colors {Reg, Green, Blue}; // Red = 0, Green = 1, Blue = 2
enum Sex: short {Male = 1, Female}; // Константы относятся к типу short, значения
                                   // начинаются с 1
На практике часто возникает необходимость в преобразовании одного типа данных в другой.
Существуют два вида преобразований типов данных:
* неявные преобразования - происходят автоматически;
* явные преобразования - выполняются с помощью операции приведения типа (cast), которая используется в тех случаях, когда может произойти потеря точности или ошибка.

Например:

float a = 1.5f;
short b = 1;
int c = b; // неявное преобразование типа
int d = (int)a; // явное преобразование вещественное типа к целому с потерей точности
